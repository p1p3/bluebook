// <auto-generated />
using System;
using Books.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Books.Infrastructure.Database.Migrations
{
    [DbContext(typeof(BooksManagmentContext))]
    partial class BooksManagmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Books.Core.Models.BookAggregate.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("books","books_managment");
                });

            modelBuilder.Entity("Books.Core.Models.BookAggregate.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BookId");

                    b.Property<int>("ChapterNumber");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("chapters","books_managment");
                });

            modelBuilder.Entity("Books.Core.Models.BookAggregate.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ChapterId");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("pages","books_managment");
                });

            modelBuilder.Entity("Books.Core.Models.Fields.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("fieldtypes","books_managment");
                });

            modelBuilder.Entity("Books.Core.Models.Fields.PageField", b =>
                {
                    b.Property<string>("Identifier")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid?>("PageId")
                        .IsRequired();

                    b.Property<bool>("Required");

                    b.Property<int?>("TypeId")
                        .IsRequired();

                    b.HasKey("Identifier");

                    b.HasIndex("PageId");

                    b.HasIndex("TypeId");

                    b.ToTable("page_fields","books_managment");
                });

            modelBuilder.Entity("Books.Core.Models.BookAggregate.Chapter", b =>
                {
                    b.HasOne("Books.Core.Models.BookAggregate.Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("Books.Core.Models.BookAggregate.Page", b =>
                {
                    b.HasOne("Books.Core.Models.BookAggregate.Chapter")
                        .WithMany("Pages")
                        .HasForeignKey("ChapterId");
                });

            modelBuilder.Entity("Books.Core.Models.Fields.PageField", b =>
                {
                    b.HasOne("Books.Core.Models.BookAggregate.Page")
                        .WithMany("Fields")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Books.Core.Models.Fields.FieldType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
